# This is a basic workflow to help you get started with Actions

name: Deploy Mule APIs to CloudHub
permissions:
  contents: read
  issues: read
  checks: write
  pull-requests: write

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the qa, main branch
  push:
    branches:
      - qa
      - main
    # Don't trigger the workflow when only workflow file / gitignore / README has the changes
    paths-ignore: 
#       - '.github/workflows/**'
      - '.gitignore'
      - 'README.md'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Build and Test with Maven
    
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: ${{github.ref_name}}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Setup JDK 1.8
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 8
      
      - name: Test and Build Jar
        env:
          nexus_username: ${{ secrets.NEXUS_USERNAME }}
          nexus_password: ${{ secrets.NEXUS_PASSWORD }}
        run: mvn -B test -f pom.xml -s .maven/settings.xml -Denv=${{vars.MULE_ENV}} -Dkey=${{secrets.SECRET_KEY}}
        
      - name: Publish MUnit Tests report
        if: always()
        uses: actions/upload-artifact@v2-preview
        with:
          name: munit-test-reports
          path: target/site/munit/coverage/*
          
      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: "target/surefire-reports/*.xml"
          show: "all"
        if: always()
          
#       - name: Test results in summary
#         if: always()
#         run: echo 'Read more [here](target/site/munit/coverage/summary.html)' >> $GITHUB_STEP_SUMMARY
          
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            target/surefire-reports/*.xml
          check_name: "Munit Test Results"
          comment_title: "Munit Tests Comments"
          # comment_mode: always
          # report_suite_logs: any
          # report_individual_runs: true
          # deduplicate_classes_by_file_name: true
          
      - name: Dorny Test Report
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Munit Dorny Report
          path:  target/surefire-reports/*.xml
          reporter: jest-junit
          only-summary: 'true'
      
#       - name: Upload coverage to Codecov
#         uses: codecov/codecov-action@v3
#         if: always()
#         with:
#           token: 810b8ed1-0904-4538-877e-6e344b5addb0
#           directory: target/site/munit/coverage
#           files: sonar.xml,munit-coverage.json,summary.html
#           flags: munit-tests
#           name: codecov-mulesoft-test
#           verbose: true
          
        
#       - name: Update Artifact name with commit hash, append date-time
#         run: |
#           artifactName1=$(ls target/*.jar | head -1)
#           commitHash=$(git rev-parse --short "$GITHUB_SHA")
#           artifactName2=$(echo $artifactName1 | sed "s/.jar/-$commitHash.`date +'%Y-%m-%d_%H%M%S'`.jar/g")
#           mv $artifactName1 $artifactName2
          
#       - name: Print Artifact Name
#         run: echo $(ls target/*.jar | head -1)
      
#       - name: Publish Artifact Jar
#         uses: actions/upload-artifact@v3
#         with:
#           name: artifacts
#           path: target/*.jar
        
          
#   create_github_issue_for_uat_deployment_attempt:
#     needs: [build]
#     runs-on: ubuntu-latest
#     permissions:
#       issues: write
      
#     steps:
#       - name: Create GitHub Issue
#         uses: actions/github-script@v5
#         with:
#           script: |
#             const issue = {
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               title: 'UAT Deployment needs approval',
#               body: `Please check the UAT environment and approve the deployment if everything looks good.`
#             }
#             github.rest.issues.create(issue)
 
#   final:
#     needs: [create_github_issue_for_uat_deployment_attempt]
#     runs-on: ubuntu-latest
    
#     steps:
#       - name: Final stage
#         run: echo "Reached Final stage"
        
        
#   deploy:
#     name: Deploy to CloudHub
#     needs: [build]
#     runs-on: ubuntu-latest
#     environment: ${{github.ref_name}}
#     steps:
#       - name: Manual approval required
#         if: contains(fromJSON('["qa", "main"]'), github.ref_name)
#         uses: trstringer/manual-approval@v1
#         timeout-minutes: 2
#         with:
#           secret: ${{ github.TOKEN }}
#           approvers: suvam-apisero
#           minimum-approvals: 1
#           issue-title: "Deploying app to ${{github.ref_name}} environment"
#           issue-body: "Please approve or deny the app deployment"
#           exclude-workflow-initiator-as-approver: false
#           additional-approved-words: ''
#           additional-denied-words: ''
          
#       - uses: actions/checkout@v3 
      
#       - uses: actions/download-artifact@v3
#         with:
#           name: artifacts
#           #path: ${{ github.workspace }}
          
#       - name: Deploy with Maven
#         run: |
#           artifactName=$(find . -type f -name "*.jar" | head -1)
#           mvn mule:deploy -DskipTests -s .maven/settings.xml \
#           -Dmule.artifact=${{vars.artifactName}} -Dmule.version=${{vars.MULE_VERSION}} \
#           -Denvironment=${{vars.CLOUDHUB_ENV}} -Dregion=${{vars.DEPLOYMENT_REGION}} \
#           -Dworkers=${{vars.WORKER_1}} -DworkerType=${{vars.WORKER}} \
#           -DbusinessGroupId=${{secrets.OPR_BUS_GRP_ID}} -DapplicationName=${{vars.APP_NAME}} \
#           -Denv=${{vars.MULE_ENV}} -DsecretKey=${{secrets.SECRET_KEY}} \
#           -Dparameter_pom=${{vars.RUNTIME_PARAM}}
          
